def shell_sort(arr):
    # Начальное значение промежутка h вычисляется по формуле 3^k - 1, где k выбирается так,
    # чтобы начальное расстояние было меньше длины массива.
    n = len(arr)
    
    # Вычисляем начальное значение шага (h). Это классическое правило выбора начального шага (Knuth sequence).
    h = 1
    while h * 3 + 1 < n:
        h = h * 3 + 1

    # Основная логика сортировки Шелла состоит в многократном применении вставочной сортировки
    # с уменьшающимся значением шага h.
    while h > 0:
        # Выполняем сортировку вставками для каждого подмножества элементов, разделённых расстоянием h.
        for i in range(h, n):   # начинаем с индекса h и идём до конца списка
            temp = arr[i]
            
            # Перемещаем элементы вперед, пока предыдущий элемент больше текущего элемента.
            j = i
            while j >= h and arr[j-h] > temp:
                arr[j] = arr[j-h]
                j -= h
                
            # Когда найдено правильное положение для временного значения, помещаем его туда.
            arr[j] = temp
        
        # Уменьшаем промежуток h для следующего прохода сортировки.
        h //= 3

# Пример использования:
if __name__ == "__main__":
    array = [8, 5, 3, 9, 1, 6, 4, 2, 7]
    print("Исходный массив:", array)
    shell_sort(array)
    print("Отсортированный массив:", array)